{"version":3,"sources":["components/PageTitleWrapper/index.tsx","components/PageTitle/index.tsx","api/masterData.ts","lib/imageValidation.ts","content/pages/Components/MasterData/PostForm/index.tsx"],"names":["PageTitle","experimentalStyled","Box","theme","spacing","PageTitleWrapper","children","maxWidth","heading","subHeading","rest","docs","container","justifyContent","alignItems","item","variant","component","gutterBottom","require","config","apiurl","process","apiKey","insert","endpoint","rawData","a","timestamp","moment","unix","headers","securitycode","sha256Generator","sessionId","toString","id","axios","post","res","data","put","console","error","response","list","type","session","securityCode","get","detail","imageValidation","files","name","filesize","size","filetype","indexOf","Swal","fire","icon","title","results","ImageWrapper","Button","palette","grey","PostForm","useParams","useForm","register","handleSubmit","setValue","getValues","errors","formState","useState","image","setImage","status","setStatus","useCookies","cookie","navigate","useNavigate","getDetail","param","user","sessionID","details","content","useEffect","onSubmit","userId","userdata","result","message","then","handleInputChange","file","formData","FormData","append","fetch","method","body","json","secure_url","fileValidation","e","target","isValid","Container","Card","sx","mt","width","noValidate","autoComplete","CardContent","TextField","margin","label","helperText","CardMedia","alt","onClick","document","getElementById","click","my","display","hidden","onChange","editor","ClassicEditor","event","getData","CardActions","ml","color"],"mappings":"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","file":"static/js/14.2f7ce445.chunk.js","sourcesContent":["import { FC, ReactNode } from 'react';\r\nimport { Container } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport { experimentalStyled } from '@material-ui/core/styles';\r\nimport { Box } from '@material-ui/core';\r\n\r\nconst PageTitle = experimentalStyled(Box)(\r\n  ({ theme }) => `\r\n        padding: ${theme.spacing(4, 0)};\r\n`\r\n);\r\n\r\ninterface PageTitleWrapperProps {\r\n  children?: ReactNode;\r\n}\r\n\r\nconst PageTitleWrapper: FC<PageTitleWrapperProps> = ({ children }) => {\r\n  return (\r\n    <>\r\n      <PageTitle>\r\n        <Container maxWidth=\"lg\">{children}</Container>\r\n      </PageTitle>\r\n    </>\r\n  );\r\n};\r\n\r\nPageTitleWrapper.propTypes = {\r\n  children: PropTypes.node.isRequired\r\n};\r\n\r\nexport default PageTitleWrapper;\r\n","import { FC } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Typography, Grid } from '@material-ui/core';\r\n\r\ninterface PageTitleProps {\r\n    heading?: string;\r\n    subHeading?: string;\r\n    docs?: string;\r\n}\r\n\r\nconst PageTitle: FC<PageTitleProps> = ({\r\n    heading = '',\r\n    subHeading = '',\r\n    docs = '',\r\n    ...rest\r\n}) => {\r\n    return (\r\n        <Grid container justifyContent=\"space-between\" alignItems=\"center\" {...rest}>\r\n            <Grid item>\r\n                <Typography variant=\"h3\" component=\"h3\" gutterBottom>\r\n                    {heading}\r\n                </Typography>\r\n                <Typography variant=\"subtitle2\">\r\n                    {subHeading}\r\n                </Typography>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nPageTitle.propTypes = {\r\n    heading: PropTypes.string,\r\n    subHeading: PropTypes.string,\r\n    docs: PropTypes.string,\r\n};\r\n\r\nexport default PageTitle;\r\n","import axios from 'axios'\r\nimport { sha256Generator } from 'src/lib/encryptor'\r\nimport moment from 'moment'\r\n\r\nrequire('dotenv').config()\r\nconst apiurl = process.env.REACT_APP_API_URL\r\nconst apiKey = process.env.REACT_APP_API_KEY\r\n\r\ninterface ServerResponse{\r\n    code?: number,\r\n    results?: ServerData[],\r\n    message: string,\r\n    status: string\r\n}\r\n\r\ninterface ServerData{\r\n    id: number,\r\n    title: string\r\n}\r\n\r\ninterface ParamData{\r\n    endpoint: string,\r\n    rawData: rawData\r\n}\r\n\r\ninterface rawData{\r\n    id: any,\r\n    name: string\r\n}\r\n\r\nconst deleteParam = ['timestamp']\r\n\r\nexport async function insert(endpoint, rawData){\r\n    const timestamp = moment().unix()\r\n\r\n    const config = {\r\n        headers: {\r\n            securitycode: sha256Generator(apiKey+rawData.sessionId+timestamp),\r\n            timestamp: moment().unix().toString()\r\n        }\r\n    }\r\n\r\n    try{\r\n\r\n        if(rawData.id === ''){\r\n            const res: any = await axios.post(`${apiurl}/${endpoint}`, rawData, config)\r\n\r\n            return res.data\r\n        }else{\r\n            const res = await axios.put(`${apiurl}/${endpoint}`, rawData, config)\r\n\r\n            return res.data\r\n        }\r\n    \r\n    }catch(errors){\r\n        console.error(errors);\r\n        return errors.response.data\r\n    }\r\n}\r\n\r\nexport async function list(type: string = '', data: any){\r\n    try{\r\n        const timestamp = moment().unix().toString()\r\n        const config = {\r\n            headers: {\r\n                session: data.sessionId,\r\n                securityCode: sha256Generator(process.env.REACT_APP_API_KEY+data.sessionId+timestamp),\r\n                timestamp: timestamp\r\n            }\r\n        }\r\n\r\n        // deleteParam.forEach((e: string) => delete data[e])\r\n\r\n        const res = await axios.get<ServerResponse>(`${apiurl}/${type}`, config)\r\n        \r\n        return res.data\r\n    }catch(errors){\r\n        console.error(errors)\r\n        return errors.response.data\r\n        // return errors\r\n    }\r\n}\r\nexport async function detail(type: string, data: any){\r\n    try{\r\n        const timestamp = moment().unix().toString()\r\n        const config = {\r\n            headers: {\r\n                session: data.sessionId,\r\n                securityCode: sha256Generator(apiKey+data.sessionId+timestamp),\r\n                timestamp: timestamp\r\n            }\r\n        }\r\n\r\n        const res = await axios.get(`${apiurl}/${type}/details/${data.id}`, config)\r\n\r\n        return res.data\r\n    }catch(errors){\r\n        console.error(errors)\r\n        return errors.response.data\r\n    }\r\n}\r\n\r\nexport async function deleteData(type: string, id: number){\r\n    try{\r\n        const res = await axios.delete(`${apiurl}/${type}/${id}`).then(response => response)\r\n\r\n        return res.data\r\n    }catch(errors){\r\n        console.error(errors)\r\n    }\r\n}\r\n\r\nexport async function uploadImage(files: any){\r\n    return {\r\n        message: 'Your files has success to upload!',\r\n        status: 'success'\r\n    }\r\n}","import Swal from 'sweetalert2'\r\n\r\nexport const imageValidation = async (files: any) => {\r\n    const filename = files.name\r\n    const filesize = files.size\r\n    const filetype = files.type\r\n    \r\n    const allowedFileType = ['image/png', 'image/jpg', 'image/jpeg']\r\n\r\n    if(allowedFileType.indexOf(filetype) === -1){\r\n        Swal.fire({\r\n            icon: 'warning',\r\n            title: \"Files must be type png!\",\r\n        })\r\n        return\r\n    }\r\n\r\n    if(filesize > 2048000){\r\n        Swal.fire({\r\n            icon: 'warning',\r\n            title: 'Files must be belo 2Mb'\r\n        })\r\n        return\r\n    }\r\n\r\n    return true\r\n\r\n    const results = await toBase64(files)\r\n\r\n    return results\r\n}\r\n\r\nconst toBase64 = file => new Promise((resolve, reject) => {\r\n    const reader = new FileReader()\r\n    reader.readAsDataURL(file)\r\n    reader.onload = () => resolve(reader.result)\r\n    reader.onerror = error => reject(error)\r\n})","import { useEffect, useState } from \"react\"\r\nimport { Helmet } from \"react-helmet-async\"\r\nimport { useCookies } from 'react-cookie'\r\nimport { imageValidation } from 'src/lib/imageValidation'\r\nimport Swal from 'sweetalert2'\r\n\r\nimport PageTitleWrapper from 'src/components/PageTitleWrapper'\r\nimport PageTitle from 'src/components/PageTitle'\r\n\r\nimport { Container, Grid, Divider, Typography, Box, experimentalStyled } from '@material-ui/core'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardMedia from '@material-ui/core/CardMedia'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport CardActions from '@material-ui/core/CardActions'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Button from '@material-ui/core/Button'\r\n\r\nimport { useForm, SubmitHandler } from 'react-hook-form'\r\nimport { detail, insert } from 'src/api/masterData'\r\n\r\nimport { CKEditor } from '@ckeditor/ckeditor5-react'\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic'\r\nimport { useNavigate, useParams } from \"react-router\"\r\n\r\ntype Inputs = {\r\n    id: number\r\n    title: string\r\n    image: string\r\n    content: string\r\n}\r\n\r\nconst ImageWrapper = experimentalStyled(Button)(\r\n    ({ theme }) => `\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        background-color: ${theme.palette.grey[200]};\r\n        min-height: 200px;\r\n        width: 100%;\r\n        transition: all .2s;\r\n        :hover{\r\n            background-color: ${theme.palette.grey[400]};\r\n            cursor: pointer;\r\n        }\r\n    `\r\n)\r\n\r\nconst PostForm = () => {\r\n    const { id } = useParams()\r\n    const { register, handleSubmit, setValue, getValues, formState: { errors } } = useForm<Inputs>()\r\n    const [image, setImage] = useState('')\r\n    const [status, setStatus] = useState(0)\r\n    const [cookie, setCookie] = useCookies([\"user\"])\r\n    const navigate = useNavigate()\r\n\r\n    const getDetail = async id => {\r\n        const param = {\r\n            id: id,\r\n            sessionId: cookie.user.sessionID,\r\n            type: 'posts'\r\n        }\r\n\r\n        const details = await detail('posts', param)\r\n\r\n        if(details.results){\r\n            setValue('id', details.results.id)\r\n            setValue('title', details.results.title)\r\n            setValue('content', details.results.content)\r\n\r\n            setImage(details.results.image)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(typeof id !== 'undefined'){\r\n            getDetail(id)\r\n        }\r\n    }, [])\r\n\r\n    const onSubmit: SubmitHandler<Inputs> = async (data) => {\r\n        data.image = image\r\n        const param = {...data, status: status, userId: cookie.user.userdata.id, sessionId: cookie.user.sessionID}\r\n\r\n        const result = await insert('posts', param)\r\n\r\n        if(result.status === 'success'){\r\n            Swal.fire({\r\n                icon: 'success',\r\n                title: result.message\r\n            }).then(() => {\r\n                navigate('/management/post')\r\n            })\r\n        }else{\r\n\r\n        }\r\n    }\r\n\r\n    const handleInputChange = async (file: any) => {\r\n        const formData = new FormData()\r\n\r\n        formData.append('file', file)\r\n        formData.append('upload_preset', 'blogs-preset')\r\n\r\n        const config = { method: 'POST', body: formData }\r\n        fetch('https://api.cloudinary.com/v1_1/ayo-belajar-company/image/upload', config)\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            setImage(response.secure_url)\r\n        })\r\n    }\r\n\r\n    const fileValidation = async (e: any) => {\r\n        const isValid = await imageValidation(e.target.files[0])\r\n        const file = e.target.files[0]\r\n\r\n        if(isValid){\r\n            handleInputChange(file)\r\n        }\r\n    }\r\n    \r\n    return(\r\n        <>\r\n            <Helmet>\r\n                <title> Post Form | Blog </title>\r\n            </Helmet>\r\n\r\n            <PageTitleWrapper>\r\n                <PageTitle heading=\"Post Form\" />\r\n            </PageTitleWrapper>\r\n\r\n            <Container maxWidth=\"lg\">\r\n                <Card>\r\n                    <Box\r\n                        component=\"form\"\r\n                        sx={{ \"& .MuiTextField-root\": { mt: 2, width: 1 } }}\r\n                        noValidate\r\n                        autoComplete=\"off\"\r\n                        onSubmit={handleSubmit(onSubmit)}\r\n                    >\r\n                        <CardContent>\r\n                                <input type=\"hidden\" {...register(\"id\")} />\r\n                                <TextField\r\n                                    margin=\"dense\"\r\n                                    type=\"text\"\r\n                                    label=\"Title\"\r\n                                    {...register(\"title\")}\r\n                                    helperText={(errors.title) ? errors.title.message : ''}\r\n                                />\r\n\r\n                                {(image !== '') ? <CardMedia\r\n                                    component=\"img\"\r\n                                    image={image}\r\n                                    alt=\"Posts Image\"\r\n                                    sx={{ mt: 2 }}\r\n                                /> : <ImageWrapper onClick={() => document.getElementById('btnUpload').click()} sx={{ my: 2 }}>\r\n                                    Add yout post photo\r\n                                    <Button id=\"btnUpload\" component=\"label\" sx={{ display: 'none' }}>\r\n                                        <input type=\"file\" hidden onChange={fileValidation} />\r\n                                        <input type=\"file\" hidden {...register(\"image\")} />\r\n                                    </Button>\r\n                                </ImageWrapper> }\r\n\r\n\r\n                                <CKEditor\r\n                                    editor={ClassicEditor}\r\n                                    data={getValues('content')}\r\n                                    onChange={(event: any, editor: any) => {\r\n                                        const data = editor.getData()\r\n                                        setValue('content', data)\r\n                                    }}\r\n                                />\r\n                        </CardContent>\r\n                        <CardActions>\r\n                            <Button type=\"submit\" sx={{ ml: 'auto' }} onClick={() => setStatus(0)}>\r\n                                Save as draft\r\n                            </Button>\r\n                            <Button color=\"primary\" variant=\"contained\" type=\"submit\" sx={{ ml: 'auto' }} onClick={() => setStatus(1)}>\r\n                                Save\r\n                            </Button>\r\n                        </CardActions>\r\n                    </Box>\r\n                </Card>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PostForm"],"sourceRoot":""}