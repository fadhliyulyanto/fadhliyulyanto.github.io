{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../../src/utils/isCheckBoxInput.ts","../../src/utils/isDateObject.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/isNameInFieldArray.ts","../../src/logic/getNodeParentName.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/logic/getProxyFormState.ts","../../src/useFormContext.tsx","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/useSubscribe.ts","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/utils/remove.ts","../../src/utils/isFunction.ts","../../src/utils/cloneObject.ts","../../src/utils/createSubject.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/getValidationModes.ts","../../src/utils/isBoolean.ts","../../src/utils/isFileInput.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/isString.ts","../../src/utils/isWeb.ts","../../src/utils/live.ts","../../src/utils/unset.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getResolverOptions.ts","../../src/logic/hasValidation.ts","../../src/logic/schemaErrorLookup.ts","../../src/utils/deepMerge.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/logic/skipValidation.ts","../../src/logic/unsetEmptyArray.ts","../../src/utils/isMessage.ts","../../src/utils/isRegex.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/logic/createFormControl.ts","../../src/useForm.ts"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","element","type","data","Date","isObjectType","isNullOrUndefined","isDateObject","names","name","some","current","substring","search","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","isObject","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","Object","defineProperty","get","keys","formStateData","omit","isEmptyObject","find","tearDown","_unsubscribe","unsubscribe","useSubscribe","props","_updateSubscription","disabled","subject","subscribe","callback","updateSubscriptionProps","skipEarlySubscription","validateAllFieldCriteria","errors","message","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","field","_f","ref","focus","refs","cloneObject","Set","isFunction","createSubject","_observers","observers","observer","subscription","tearDowns","add","push","teardown","createSubscription","subscriber","closed","createSubscriber","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","isRadioInput","isCheckBoxInput","window","document","isHTMLElement","contains","unset","previousObjRef","updatePath","childObject","slice","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","defaultResult","isValid","validResult","options","values","option","checked","map","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","_fields","criteriaMode","shouldUseNativeValidation","mount","required","min","max","maxLength","minLength","pattern","validate","schemaErrorLookup","error","fieldName","join","foundError","pop","deepMerge","target","targetValue","sourceValue","setDirtyFields","defaultValues","dirtyFields","parentNode","parentName","isBlurEvent","isTouched","isSubmitted","reValidateMode","isString","RegExp","getValidateError","validationData","isRegex","inputValue","a","inputRef","setCustomValidty","reportValidity","setCustomValidity","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","isWindowUndefined","createFormControl","delayErrorCallback","_options","_formState","isDirty","isValidating","submitCount","touchedFields","isSubmitting","isSubmitSuccessful","_defaultValues","_formValues","shouldUnregister","_stateFlags","action","watch","_names","unMount","array","timer","validateFields","_subjects","control","state","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","args","clearTimeout","setTimeout","isFieldWatched","watchAll","has","_updateValid","shouldSkipRender","resolver","_executeSchema","executeBuildInValidation","_updateFieldArray","method","shouldSetValues","shouldSetFields","fieldValues","argA","argB","unsetEmptyArray","updateFieldArrayDirty","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","isCurrentTouched","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","isCurrentFieldPristine","setFieldArrayDirtyFields","shouldRenderByError","fieldState","previousFieldError","shouldUpdateValid","delayError","updatedFormState","context","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","fieldReference","validateField","fieldError","_removeUnmounted","live","unregister","getValues","_getWatch","isGlobal","convertToArrayPayload","_getFieldArray","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldDirty","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","handleChange","event","shouldSkipValidation","hasValidation","deps","skipValidation","isWatched","onBlur","onChange","previousErrorLookupResult","errorLookupResult","fieldNames","Promise","all","shouldFocus","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","register","fieldRef","querySelectorAll","isRadioOrCheckboxFunction","handleSubmit","onValid","onInvalid","preventDefault","persist","hasNoPromiseError","reset","formValues","keepStateOptions","hasUpdatedFormValues","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","setFocus","useForm","_formControl","updateFormState","shouldRenderFormState","getProxyFormState"],"mappings":"iPACe,SAASA,EAA2BC,EAAGC,GACpD,IAAIC,EAEJ,GAAsB,qBAAXC,QAAgD,MAAtBH,EAAEG,OAAOC,UAAmB,CAC/D,GAAIC,MAAMC,QAAQN,KAAOE,EAAK,OAAAK,EAAA,GAA2BP,KAAOC,GAAkBD,GAAyB,kBAAbA,EAAEQ,OAAqB,CAC/GN,IAAIF,EAAIE,GACZ,IAAIO,EAAI,EAEJC,EAAI,aAER,MAAO,CACLC,EAAGD,EACHE,EAAG,WACD,OAAIH,GAAKT,EAAEQ,OAAe,CACxBK,MAAM,GAED,CACLA,MAAM,EACNC,MAAOd,EAAES,OAGbM,EAAG,SAAWC,GACZ,MAAMA,GAERC,EAAGP,GAIP,MAAM,IAAIQ,UAAU,yIAGtB,IAEIC,EAFAC,GAAmB,EACnBC,GAAS,EAEb,MAAO,CACLV,EAAG,WACDT,EAAKF,EAAEG,OAAOC,aAEhBQ,EAAG,WACD,IAAIU,EAAOpB,EAAGqB,OAEd,OADAH,EAAmBE,EAAKT,KACjBS,GAETP,EAAG,SAAWS,GACZH,GAAS,EACTF,EAAMK,GAERP,EAAG,WACD,IACOG,GAAoC,MAAhBlB,EAAW,QAAWA,EAAW,SAC1D,QACA,GAAImB,EAAQ,MAAMF,K,kCClD1B,EAAe,SAACM,GAAD,MACI,aAAjBA,EAAQC,MCHV,EAAe,SAACC,GAAD,OAAmBA,aAAgBC,MCAlD,EAAe,SAACd,GAAD,OAAwD,MAATA,GCGjDe,EAAe,SAACf,GAAD,MAAqC,kBAAVA,GAEvD,EAAe,SAAmBA,GAAnB,OACZgB,EAAkBhB,KAClBT,MAAMC,QAAQQ,IACfe,EAAaf,KACZiB,EAAajB,ICLhB,EAAe,SAACkB,EAA+BC,GAAhC,OACb,YAAID,GAAOE,MAAK,SAACC,GAAD,OCLH,SAACF,GAAD,OAAkBA,EAAKG,UAAU,EAAGH,EAAKI,OAAO,SAAWJ,EDK3CK,CAAkBL,KAAUE,MEL3D,EAAe,SAACrB,GAAD,OAAkBA,EAAMyB,OAAOC,UCA9C,EAAe,SAACC,GAAD,YAA4CC,IAARD,GCKnD,EAAe,SAAIE,EAAQC,EAAcC,GACvC,GAAIC,EAASH,IAAQC,EAAM,CACzB,IAAMG,EAASC,EAAQJ,EAAKK,MAAM,cAAcC,QAC9C,SAACH,EAAQI,GAAT,OAAkBrB,EAAkBiB,GAAUA,EAASA,EAAOI,KAC9DR,GAGF,OAAOS,EAAYL,IAAWA,IAAWJ,EACrCS,EAAYT,EAAIC,IACdC,EACAF,EAAIC,GACNG,ICdKM,EACL,OAIKC,EACH,SADGA,EAED,WAFCA,EAGD,WAHCA,EAIA,YAJAA,EAKN,MAGMC,EACN,MADMA,EAEN,MAFMA,EAGA,YAHAA,EAIA,YAJAA,EAKF,UALEA,EAMD,WANCA,EAOD,WCtBZ,EAAe,SACbC,EACAL,GAEA,IAAMM,EAAO,OAAH,UAAQD,GAGlB,cAFOC,EAAKN,GAELM,GCJT,GCEwB,gBAA0C,MDFnD,SACbC,EACAC,EACAC,GACa,IAAbC,IAAa,yDAEb,SAASC,EAAaC,GACpB,OAAO,WACL,GAAIA,KAAQL,EAKV,OAJIC,EAAgBI,KAAUT,IAC5BK,EAAgBI,IAASF,GAAUP,GAErCM,IAAwBA,EAAoBG,IAAQ,GAC7CL,EAAUK,IAMvB,IAAMhB,EAAS,GACf,IAAK,IAAMI,KAAOO,EAChBM,OAAOC,eAAelB,EAAQI,EAAK,CACjCe,IAAKJ,EAAaX,KAItB,OAAOJ,IEzBT,EAAe,SAACjC,GAAD,OACbgC,EAAShC,KAAWkD,OAAOG,KAAKrD,GAAON,QCAzC,EAAe,SACb4D,EACAT,EACAE,GAEA,IAAMH,EAAYW,EAAKD,EAAe,QAEtC,OACEE,EAAcZ,IACdM,OAAOG,KAAKT,GAAWlD,QAAUwD,OAAOG,KAAKR,GAAiBnD,QAC9DwD,OAAOG,KAAKT,GAAWa,MACrB,SAACpB,GAAD,OACEQ,EAAgBR,OACdU,GAAUP,OClBpB,EAAe,SAAIxC,GAAJ,OAAkBT,MAAMC,QAAQQ,GAASA,EAAQ,CAACA,ICmB3D0D,EAAW,SACfC,GAEIA,EAAatC,UACfsC,EAAatC,QAAQuC,cACrBD,EAAatC,aAAUO,I,SAgBXiC,EAAgBC,GAC9B,IAAMH,EAAe,WACfI,EAAsB,UAAmB,eAE/CA,EAAoB1C,QAfpB,gBAAMsC,EAAN,EAAMA,aAAcG,EAApB,EAAoBA,MAApB,OACA,WACMA,EAAME,SACRN,EAASC,GACCA,EAAatC,UACvBsC,EAAatC,QAAUyC,EAAMG,QAAQC,UAAU,CAC7CzD,KAAMqD,EAAMK,aASYC,CAAwB,CACpDT,eACAG,WAGDA,EAAMO,uBAAyBN,EAAoB1C,UAEpD,aAAgB,WAEd,OADA0C,EAAoB1C,UACb,kBAAMqC,EAASC,MACrB,I,IChDL,EAAe,SACbxC,EACAmD,EACAC,EACA3D,EACA4D,GALa,OAObF,E,+BAESC,EAAOpD,IAAK,CACfsD,MAAO,OAAF,wBACCF,EAAOpD,IAASoD,EAAOpD,GAAOsD,MAAQF,EAAOpD,GAAOsD,MAAQ,IAD7D,eAEF7D,EAAO4D,IAAW,MAGvB,ICrBN,EAAe,SAACxE,GAAD,MAAmB,QAAQ0E,KAAK1E,ICE/C,EAAe,SAAC2E,GAAD,OACbzC,EAAQyC,EAAMC,QAAQ,YAAa,IAAIzC,MAAM,W,SCGvB0C,EACtBC,EACAhD,EACA9B,GAOA,IALA,IAAI+E,GAAS,EACPC,EAAWC,EAAMnD,GAAQ,CAACA,GAAQoD,EAAapD,GAC/CpC,EAASsF,EAAStF,OAClByF,EAAYzF,EAAS,IAElBqF,EAAQrF,GAAQ,CACvB,IAAM2C,EAAM2C,EAASD,GACjBK,EAAWpF,EAEf,GAAI+E,IAAUI,EAAW,CACvB,IAAME,EAAWP,EAAOzC,GACxB+C,EACEpD,EAASqD,IAAa9F,MAAMC,QAAQ6F,GAChCA,EACCC,OAAON,EAASD,EAAQ,IAEzB,GADA,GAGRD,EAAOzC,GAAO+C,EACdN,EAASA,EAAOzC,GAElB,OAAOyC,EC1BT,IAAM,EAAe,SAAfS,EACJC,EACArB,EACAsB,GAA0D,UAExCA,GAAevC,OAAOG,KAAKmC,IAFa,IAE1D,2BAAsD,KAA3CnD,EAA2C,QAC9CqD,EAAQtC,EAAIoC,EAAQnD,GAE1B,GAAIqD,EAAO,CACT,IAAMC,EAAKD,EAAMC,GACXtE,EAAUkC,EAAKmC,EAAO,MAE5B,GAAIC,GAAMxB,EAASwB,EAAGxE,MAAO,CAC3B,GAAIwE,EAAGC,IAAIC,OAASvD,EAAYqD,EAAGC,IAAIC,SACrC,MACK,GAAIF,EAAGG,KAAM,CAClBH,EAAGG,KAAK,GAAGD,QACX,YAEO7D,EAASX,IAClBkE,EAAalE,EAAS8C,KAjB8B,gCCO5D,IChBA,EAAe,SAACnE,GAAD,MACI,oBAAVA,G,SCEe+F,EAAelF,GACrC,IAAI8B,EACEnD,EAAUD,MAAMC,QAAQqB,GAE9B,GAAIA,aAAgBC,KAClB6B,EAAO,IAAI7B,KAAKD,QACX,GAAIA,aAAgBmF,IACzBrD,EAAO,IAAIqD,IAAInF,OACV,KAAIrB,IAAWwC,EAASnB,GAU7B,OAAOA,EARP,IAAK,IAAMwB,KADXM,EAAOnD,EAAU,GAAK,GACJqB,EAAM,CACtB,GAAIoF,EAAWpF,EAAKwB,IAAO,CACzBM,EAAO9B,EACP,MAEF8B,EAAKN,GAAO0D,EAAYlF,EAAKwB,KAMjC,OAAOM,E,SCoCeuD,IACtB,IAAIC,EAA4B,GAmBhC,MAAO,CACDC,gBACF,OAAOD,GAET1F,KArBW,SAACT,GAAQ,UACGmG,GADH,IACpB,2BAAmC,SACxB1F,KAAKT,IAFI,gCAsBpBkE,UAhBgB,SAACmC,GACjB,IAAMC,EAhDV,WACE,IAAIC,EAAwB,GAa5B,MAAO,CACLC,IAZU,SAAC9C,GACX6C,EAAUE,KAAK/C,IAYfE,YATkB,qBACK2C,GADL,IAClB,4BACEG,EADgC,WADhB,8BAIlBH,EAAY,KAqCSI,GACfC,EA7BV,SACEP,EACAC,GAEA,IAAIO,GAAS,EASb,OARAP,EAAaE,KAAI,kBAAOK,GAAS,KAQ1B,CACLpG,KAPW,SAACT,GACP6G,GACHR,EAAS5F,KAAKT,KAoBG8G,CAAiBT,EAAUC,GAE9C,OADAH,EAAWM,KAAKG,GACTN,GAaP1C,YAVkB,WAClBuC,EAAa,KCxEjB,MAAe,SAACnG,GAAD,OACbgB,EAAkBhB,KAAWe,EAAaf,I,SCDpB+G,EAAUC,EAAcC,GAC9C,GAAIC,EAAYF,IAAYE,EAAYD,GACtC,OAAOD,IAAYC,EAGrB,GAAIhG,EAAa+F,IAAY/F,EAAagG,GACxC,OAAOD,EAAQG,YAAcF,EAAQE,UAGvC,IAAMC,EAAQlE,OAAOG,KAAK2D,GACpBK,EAAQnE,OAAOG,KAAK4D,GAE1B,GAAIG,EAAM1H,SAAW2H,EAAM3H,OACzB,OAAO,EAGT,cAAkB0H,EAAlB,eAAyB,CAApB,IAAM/E,EAAG,KACNiF,EAAON,EAAQ3E,GAErB,IAAKgF,EAAME,SAASlF,GAClB,OAAO,EAGT,GAAY,QAARA,EAAe,CACjB,IAAMmF,EAAOP,EAAQ5E,GAErB,GACGpB,EAAaqG,IAASrG,EAAauG,IACnCxF,EAASsF,IAAStF,EAASwF,IAC3BjI,MAAMC,QAAQ8H,IAAS/H,MAAMC,QAAQgI,IACjCT,EAAUO,EAAME,GACjBF,IAASE,EAEb,OAAO,GAKb,OAAO,ECxCT,MAAe,SACbC,GADa,MAQT,CACJC,YAAaD,GAAQA,IAASjF,EAC9BmF,SAAUF,IAASjF,EACnBoF,WAAYH,IAASjF,EACrBqF,QAASJ,IAASjF,EAClBsF,UAAWL,IAASjF,IChBtB,EAAe,SAACxC,GAAD,MAAuD,mBAAVA,GCE5D,EAAe,SAACW,GAAD,MACI,SAAjBA,EAAQC,MCHV,GAAe,SAACZ,GAAD,OACbA,aAAiB+H,aCCnB,GAAe,SAACpH,GAAD,MACb,oBAAAA,EAAQC,MCDV,GAAe,SAACD,GAAD,MACI,UAAjBA,EAAQC,MCEV,GAAe,SAACgF,GAAD,OACboC,GAAapC,IAAQqC,EAAgBrC,ICNvC,GAAe,SAAC5F,GAAD,MAAsD,kBAAVA,GCA3D,GAAiC,qBAAXkI,QACU,qBAAvBA,OAAOH,aACM,qBAAbI,SCET,GAAe,SAACvC,GAAD,OAAcwC,GAAcxC,IAAQuC,SAASE,SAASzC,I,SCc7C0C,GAAMxD,EAAahD,GACzC,IAIIyG,EAJEC,EAAavD,EAAMnD,GAAQ,CAACA,GAAQoD,EAAapD,GACjD2G,EACiB,GAArBD,EAAW9I,OAAcoF,EAd7B,SAAiBA,EAAa0D,GAI5B,IAHA,IAAM9I,EAAS8I,EAAWE,MAAM,GAAI,GAAGhJ,OACnCqF,EAAQ,EAELA,EAAQrF,GACboF,EAASxC,EAAYwC,GAAUC,IAAUD,EAAO0D,EAAWzD,MAG7D,OAAOD,EAM6B6D,CAAQ7D,EAAQ0D,GAC9CnG,EAAMmG,EAAWA,EAAW9I,OAAS,GAGvC+I,UACKA,EAAYpG,GAGrB,IAAK,IAAIuG,EAAI,EAAGA,EAAIJ,EAAWE,MAAM,GAAI,GAAGhJ,OAAQkJ,IAAK,CACvD,IAAI7D,GAAS,EACT8D,OAAS,EACPC,EAAeN,EAAWE,MAAM,IAAKE,EAAI,IACzCG,EAAqBD,EAAapJ,OAAS,EAMjD,IAJIkJ,EAAI,IACNL,EAAiBzD,KAGVC,EAAQ+D,EAAapJ,QAAQ,CACpC,IAAMsJ,EAAOF,EAAa/D,GAC1B8D,EAAYA,EAAYA,EAAUG,GAAQlE,EAAOkE,GAG/CD,IAAuBhE,IACrB/C,EAAS6G,IAAcrF,EAAcqF,IACpCtJ,MAAMC,QAAQqJ,KACZA,EAAUpH,QACT,SAACZ,GAAD,OACGmB,EAASnB,KAAU2C,EAAc3C,IAAUoI,EAAUpI,MACxDnB,UAEN6I,SAAwBA,EAAeS,UAAelE,EAAOkE,IAG/DT,EAAiBM,GAIrB,OAAO/D,ECpDT,IAAMoE,GAAqC,CACzClJ,OAAO,EACPmJ,SAAS,GAGLC,GAAc,CAAEpJ,OAAO,EAAMmJ,SAAS,GAE5C,GAAe,SAACE,GACd,GAAI9J,MAAMC,QAAQ6J,GAAU,CAC1B,GAAIA,EAAQ3J,OAAS,EAAG,CACtB,IAAM4J,EAASD,EACZ5H,QAAO,SAAC8H,GAAD,OAAYA,GAAUA,EAAOC,UAAYD,EAAOvF,YACvDyF,KAAI,SAACF,GAAD,OAAYA,EAAOvJ,SAC1B,MAAO,CAAEA,MAAOsJ,EAAQH,UAAWG,EAAO5J,QAG5C,OAAO2J,EAAQ,GAAGG,UAAYH,EAAQ,GAAGrF,SAErCqF,EAAQ,GAAGK,aAAepH,EAAY+G,EAAQ,GAAGK,WAAW1J,OAC1DsC,EAAY+G,EAAQ,GAAGrJ,QAA+B,KAArBqJ,EAAQ,GAAGrJ,MAC1CoJ,GACA,CAAEpJ,MAAOqJ,EAAQ,GAAGrJ,MAAOmJ,SAAS,GACtCC,GACFF,GAGN,OAAOA,IC9BT,GAAe,SACblJ,EADa,OAEX2J,EAFW,EAEXA,cAAeC,EAFJ,EAEIA,YAAaC,EAFjB,EAEiBA,WAFjB,OAIbvH,EAAYtC,GACRA,EACA2J,EACU,KAAV3J,EACE8J,KACC9J,EACH4J,EACA,IAAI9I,KAAKd,GACT6J,EACAA,EAAW7J,GACXA,GCZA+J,GAAkC,CACtCZ,SAAS,EACTnJ,MAAO,MAGT,GAAe,SAACqJ,GAAD,OACb9J,MAAMC,QAAQ6J,GACVA,EAAQjH,QACN,SAAC4H,EAAUT,GAAX,OACEA,GAAUA,EAAOC,UAAYD,EAAOvF,SAChC,CACEmF,SAAS,EACTnJ,MAAOuJ,EAAOvJ,OAEhBgK,IACND,IAEFA,I,SCXkBE,GAActE,GACpC,IAAMC,EAAMD,EAAGC,IAEf,KAAID,EAAGG,KAAOH,EAAGG,KAAKoE,OAAM,SAACtE,GAAD,OAASA,EAAI5B,YAAY4B,EAAI5B,UAIzD,OAAImG,EAAYvE,GACPA,EAAIwE,MAGTpC,GAAapC,GACRyE,GAAc1E,EAAGG,MAAM9F,MAG5BsK,GAAiB1E,GACZ,YAAIA,EAAI2E,iBAAiBd,KAAI,qBAAGzJ,SAGrCwK,EAAW5E,GACN6E,GAAiB9E,EAAGG,MAAM9F,MAG5B0K,GAAgBpI,EAAYsD,EAAI5F,OAAS2F,EAAGC,IAAI5F,MAAQ4F,EAAI5F,MAAO2F,GCxB5E,OAAe,SACbF,EACAkF,EACAC,EACAC,GAEA,IAF+C,EAEzCrF,EAAiD,GAFR,IAI5BC,GAJ4B,IAI/C,2BAAgC,KAArBtE,EAAqB,QACxBuE,EAAetC,EAAIuH,EAASxJ,GAElCuE,GAASb,EAAIW,EAAQrE,EAAMuE,EAAMC,KAPY,8BAU/C,MAAO,CACLiF,eACA1J,MAAO,YAAIuE,GACXD,SACAqF,8BC1BJ,GAAe,SAACxB,GAAD,OACbA,EAAQyB,QACPzB,EAAQ0B,UACP1B,EAAQ2B,KACR3B,EAAQ4B,KACR5B,EAAQ6B,WACR7B,EAAQ8B,WACR9B,EAAQ+B,SACR/B,EAAQgC,W,SCNYC,GACtB/G,EACAoG,EACAxJ,GAKA,IAAMoK,EAAQnI,EAAImB,EAAQpD,GAE1B,GAAIoK,GAAStG,EAAM9D,GACjB,MAAO,CACLoK,QACApK,QAMJ,IAFA,IAAMD,EAAQC,EAAKgB,MAAM,KAElBjB,EAAMxB,QAAQ,CACnB,IAAM8L,EAAYtK,EAAMuK,KAAK,KACvB/F,EAAQtC,EAAIuH,EAASa,GACrBE,EAAatI,EAAImB,EAAQiH,GAE/B,GAAI9F,IAAUnG,MAAMC,QAAQkG,IAAUvE,IAASqK,EAC7C,MAAO,CAAErK,QAGX,GAAIuK,GAAcA,EAAW9K,KAC3B,MAAO,CACLO,KAAMqK,EACND,MAAOG,GAIXxK,EAAMyK,MAGR,MAAO,CACLxK,Q,SCxCYyK,GAGdC,EAAWnJ,GACX,GAAIwE,EAAY2E,IAAW3E,EAAYxE,GACrC,OAAOA,EAGT,IAAK,IAAML,KAAOK,EAAQ,CACxB,IAAMoJ,EAAcD,EAAOxJ,GACrB0J,EAAcrJ,EAAOL,GAE3B,IACEwJ,EAAOxJ,GACJL,EAAS8J,IAAgB9J,EAAS+J,IAClCxM,MAAMC,QAAQsM,IAAgBvM,MAAMC,QAAQuM,GACzCH,GAAUE,EAAaC,GACvBA,EACN,WAGJ,OAAOF,EClBT,SAASG,GAKP1C,EACA2C,EACAC,EACAC,EACAC,GAIA,IAFA,IAAIrH,GAAS,IAEJA,EAAQuE,EAAO5J,QAAQ,CAC9B,IAAK,IAAM2C,KAAOiH,EAAOvE,GACnBxF,MAAMC,QAAQ8J,EAAOvE,GAAO1C,MAC7B6J,EAAYnH,KAAWmH,EAAYnH,GAAS,IAC7CmH,EAAYnH,GAAO1C,GAAO,GAC1B2J,GACE1C,EAAOvE,GAAO1C,GACde,EAAI6I,EAAclH,IAAU,GAAI1C,EAAK,IACrC6J,EAAYnH,GAAO1C,GACnB6J,EAAYnH,GACZ1C,KAGDrB,EAAkBiL,IACnBlF,EAAU3D,EAAI6I,EAAclH,IAAU,GAAI1C,GAAMiH,EAAOvE,GAAO1C,IAC1DwC,EAAIqH,EAAYnH,IAAU,GAAI1C,GAC7B6J,EAAYnH,GAAM,+BACdmH,EAAYnH,IADE,eAEhB1C,GAAM,IAKjB8J,IACGD,EAAYxM,eACNyM,EAAWC,GAGtB,OAAOF,EAGT,OAAe,SACb5C,EACA2C,EACAC,GAHa,OAKbN,GACEI,GAAe1C,EAAQ2C,EAAeC,EAAYxD,MAAM,EAAGY,EAAO5J,SAClEsM,GAAeC,EAAe3C,EAAQ4C,EAAYxD,MAAM,EAAGY,EAAO5J,WCzDtE,GAAe,SACb2M,EACAC,EACAC,EACAC,EAIA/E,GAQA,OAAIA,EAAKI,WAEG0E,GAAe9E,EAAKK,YACrBwE,GAAaD,IACbE,EAAcC,EAAe7E,SAAWF,EAAKE,WAC9C0E,IACCE,EAAcC,EAAe5E,WAAaH,EAAKG,aACjDyE,ICnBX,GAAe,SAAIzG,EAAQzE,GAAZ,OACZe,EAAQkB,EAAIwC,EAAKzE,EAAM,KAAKzB,QAAU4I,GAAM1C,EAAKzE,ICApD,GAAe,SAACnB,GAAD,OACbyM,GAASzM,IAAU,iBAAqBA,ICN1C,GAAe,SAACA,GAAD,OAAqCA,aAAiB0M,Q,SCI7CC,GACtB1K,EACA2D,GACiB,IAAjBhF,EAAiB,uDAAV,WAEP,GACE,GAAUqB,IACT1C,MAAMC,QAAQyC,IAAWA,EAAOiI,MAAM,KACtCjB,EAAUhH,KAAYA,EAEvB,MAAO,CACLrB,OACA4D,QAAS,GAAUvC,GAAUA,EAAS,GACtC2D,OCbN,OAAe,SAACgH,GAAD,OACb5K,EAAS4K,KAAoBC,GAAQD,GACjCA,EACA,CACE5M,MAAO4M,EACPpI,QAAS,KCWjB,0CAAe,WACbkB,EACAoH,EACAxI,EACAuG,GAJa,gHAAAkC,EAAA,2DAoBTrH,EAAMC,GAbRC,EAPW,EAOXA,IACAE,EARW,EAQXA,KACAiF,EATW,EASXA,SACAG,EAVW,EAUXA,UACAC,EAXW,EAWXA,UACAH,EAZW,EAYXA,IACAC,EAbW,EAaXA,IACAG,EAdW,EAcXA,QACAC,EAfW,EAeXA,SACAlK,EAhBW,EAgBXA,KACAwI,EAjBW,EAiBXA,cACAmB,EAlBW,EAkBXA,MACA9G,EAnBW,EAmBXA,SAEG8G,IAAS9G,EArBD,yCAsBJ,IAtBI,UAwBPgJ,EAA6BlH,EAAOA,EAAK,GAAMF,EAC/CqH,EAAmB,SAACzI,GACpBqG,GAA6BmC,EAASE,iBACxCF,EAASG,kBAAkBlE,EAAUzE,GAAW,GAAKA,GAAW,KAChEwI,EAASE,mBAGP3B,EAA6B,GAC7B6B,EAAUpF,GAAapC,GACvB4E,EAAavC,EAAgBrC,GAC7ByH,EAAoBD,GAAW5C,EAC/B8C,GACF3D,GAAiBQ,EAAYvE,MAAUA,EAAI5F,OAC9B,KAAf8M,GACCvN,MAAMC,QAAQsN,KAAgBA,EAAWpN,OACtC6N,EAAoB,EAAaC,KACrC,KACArM,EACAmD,EACAiH,GAEIkC,EAAmB,SACvBC,EACAC,EACAC,GAE0C,IAD1CC,EAC0C,uDADhCpL,EACVqL,EAA0C,uDAAhCrL,EAEJ+B,EAAUkJ,EAAYC,EAAmBC,EAC/CrC,EAAMpK,GAAK,eACTP,KAAM8M,EAAYG,EAAUC,EAC5BtJ,UACAoB,OACG2H,EAAkBG,EAAYG,EAAUC,EAAStJ,MAKtDuG,MACGsC,IAAsBC,GAAWtM,EAAkB8L,KACnD7D,EAAU6D,KAAgBA,GAC1BtC,IAAeC,GAAiB3E,GAAMqD,SACtCiE,IAAY/C,GAAcvE,GAAMqD,SAlExB,sBAoEgB,GAAU4B,GACjC,CAAE/K,QAAS+K,EAAUvG,QAASuG,GAC9BgD,GAAmBhD,GAFf/K,EApEG,EAoEHA,MAAOwE,EApEJ,EAoEIA,SAIXxE,EAxEO,oBAyETuL,EAAMpK,GAAK,eACTP,KAAM6B,EACN+B,UACAoB,IAAKoH,GACFO,EAAkB9K,EAAiC+B,IAEnDF,EA/EI,wBAgFP2I,EAAiBzI,GAhFV,kBAiFA+G,GAjFA,WAsFR+B,GAAatM,EAAkBgK,IAAShK,EAAkBiK,GAtFlD,oBAyFL+C,EAAYD,GAAmB9C,GAC/BgD,EAAYF,GAAmB/C,GAEhC1F,MAAMwH,IAUHoB,EACHtI,EAAyBgE,aAAe,IAAI9I,KAAKgM,GAChDL,GAASuB,EAAUhO,SACrB0N,EAAYQ,EAAY,IAAIpN,KAAKkN,EAAUhO,QAEzCyM,GAASwB,EAAUjO,SACrBmO,EAAYD,EAAY,IAAIpN,KAAKmN,EAAUjO,UAfvCoO,EACHxI,EAAyB+D,eAAiB0E,WAAWvB,GACnD9L,EAAkBgN,EAAUhO,SAC/B0N,EAAYU,EAAcJ,EAAUhO,OAEjCgB,EAAkBiN,EAAUjO,SAC/BmO,EAAYC,EAAcH,EAAUjO,SAapC0N,IAAaS,EAhHN,oBAiHTV,IACIC,EACFM,EAAUxJ,QACVyJ,EAAUzJ,QACV/B,EACAA,GAEG6B,EAxHI,wBAyHP2I,EAAiB1B,EAAMpK,GAAOqD,SAzHvB,kBA0HA+G,GA1HA,YA+HRL,IAAaC,GAAemC,IAAWb,GAASK,GA/HxC,oBAgILwB,EAAkBP,GAAmB7C,GACrCqD,GAAkBR,GAAmB5C,GACrC,IACHnK,EAAkBsN,EAAgBtO,QACnC8M,EAAWpN,OAAS4O,EAAgBtO,MAChC,IACHgB,EAAkBuN,GAAgBvO,QACnC8M,EAAWpN,OAAS6O,GAAgBvO,OAElC,KAAa,GAzIN,oBA0ITyN,EACE,GACAa,EAAgB9J,QAChB+J,GAAgB/J,SAEbF,EA/II,wBAgJP2I,EAAiB1B,EAAMpK,GAAOqD,SAhJvB,kBAiJA+G,GAjJA,YAsJTH,GAAYkC,IAAWb,GAASK,GAtJvB,uBAuJ8BiB,GAAmB3C,GAA7CoD,GAvJJ,GAuJHxO,MAAqB,GAvJlB,GAuJkBwE,SAEzBqI,GAAQ2B,KAAkB1B,EAAW2B,MAAMD,IAzJpC,oBA0JTjD,EAAMpK,GAAK,eACTP,KAAM6B,EACN+B,QAAA,GACAoB,OACG2H,EAAkB9K,EAAgC,KAElD6B,EAhKI,wBAiKP2I,EAAiB,IAjKV,kBAkKA1B,GAlKA,YAuKTF,EAvKS,qBAwKPpF,EAAWoF,GAxKJ,kCAyKYA,EAASyB,GAzKrB,WAyKH7K,GAzKG,SA0KHyM,GAAgB/B,GAAiB1K,GAAQ+K,IA1KtC,oBA6KPzB,EAAMpK,GAAK,+BACNuN,IACAnB,EACD9K,EACAiM,GAAclK,UAGbF,EApLE,wBAqLL2I,EAAiByB,GAAclK,SArL1B,kBAsLE+G,GAtLF,oCAyLAvJ,EAASqJ,GAzLT,iBA0LLsD,GAAmB,GA1Ld,OAAA5B,EAAA,KA4LS1B,GA5LT,kDA4LEhJ,GA5LF,WA6LFmB,EAAcmL,KAAsBrK,EA7LlC,iEAiMeqI,GAjMf,UAkMCtB,EAAShJ,IAAKyK,GAlMf,yBAmMLE,EAnMK,KAoML3K,IAHI,IAjMC,2BAwMLsM,GAAmB,OAAH,wBACX,IACApB,EAAkBlL,GAAK,GAAcmC,UAG1CyI,EAAiB,GAAczI,SAE3BF,IACFiH,EAAMpK,GAAQwN,KAhNX,2BAqNJnL,EAAcmL,IArNV,oBAsNPpD,EAAMpK,GAAK,eACTyE,IAAKoH,GACF2B,IAEArK,EA1NE,0CA2NEiH,GA3NF,eAiOb0B,GAAiB,GAjOJ,kBAkON1B,GAlOM,4CAAf,4DC4DMqD,GAAiB,CACrBnH,KAAMjF,EACNgK,eAAgBhK,EAChBqM,kBAAkB,GAGdC,GAAsC,qBAAX5G,O,SAEjB6G,KAIkC,IAkC5CC,EAlCJlL,EAAgD,uDAAF,GAE1CmL,EAAW,OAAH,wBACPL,IACA9K,GAEDoL,EAAsC,CACxCC,SAAS,EACTC,cAAc,EACdlD,YAAa,GACbK,aAAa,EACb8C,YAAa,EACbC,cAAe,GACfC,cAAc,EACdC,oBAAoB,EACpBrG,SAAS,EACT5E,OAAQ,IAENoG,EAAU,GACV8E,EAAiBR,EAAShD,eAAiB,GAC3CyD,EAAcT,EAASU,iBACvB,GACA5J,EAAY0J,GACZG,EAAc,CAChBC,QAAQ,EACR/E,OAAO,EACPgF,OAAO,GAELC,EAAgB,CAClBjF,MAAO,IAAI9E,IACXgK,QAAS,IAAIhK,IACbiK,MAAO,IAAIjK,IACX8J,MAAO,IAAI9J,KAGTkK,EAAQ,EACRC,EAAoD,GAClDtN,EAAkB,CACtBsM,SAAS,EACTjD,aAAa,EACboD,eAAe,EACfF,cAAc,EACdjG,SAAS,EACT5E,QAAQ,GAEJ6L,EAAoC,CACxCN,MAAO5J,IACPmK,QAASnK,IACT+J,MAAO/J,IACPoK,MAAOpK,KAGHqK,EAA6BC,EAAmBvB,EAASxH,MACzDgJ,EAA4BD,EAAmBvB,EAASzC,gBACxDkE,EACJzB,EAASrE,eAAiBpI,EAEtBmO,EACJ,SAAqBxM,EAAayM,GAAlC,OACA,WAAa,2BAATC,EAAS,yBAATA,EAAS,gBACXC,aAAaZ,GACbA,EAAQhI,OAAO6I,YAAW,kBAAM5M,EAAQ,WAAR,EAAY0M,KAAOD,KAGjDI,EAAiB,SACrB7P,EACAkL,GAFqB,OAIpBA,IACA0D,EAAOkB,UACNlB,EAAOD,MAAMoB,IAAI/P,IACjB4O,EAAOD,MAAMoB,KAAK/P,EAAKsN,MAAM,QAAU,IAAI,MAEzC0C,EAAY,uCAAG,WAAOC,GAAP,eAAArE,EAAA,yDACf5D,GAAU,GAEVtG,EAAgBsG,QAHD,qBAIP8F,EAASoC,SAJF,6BAKb7N,EALa,SAKQ8N,IALR,mBAK0B/M,OAL1B,6DAMPgN,GAAyB5G,GAAS,GAN3B,4BAIjBxB,EAJiB,KAQZiI,GAAoBjI,IAAY+F,EAAW/F,UAC9C+F,EAAW/F,QAAUA,EACrBiH,EAAUE,MAAM7P,KAAK,CACnB0I,aAXa,iCAgBZA,GAhBY,4CAAH,sDAmBZqI,EAA2C,SAC/CrQ,EACAsQ,EACAZ,GAGsB,IAFtBvH,EAEsB,uDAFb,GACToI,IACsB,yDAAtBC,IAAsB,yDAItB,GAFA/B,EAAYC,QAAS,EAEjB8B,GAAmBvO,EAAIuH,EAASxJ,GAAO,CACzC,IAAMyQ,EAAcH,EAAOrO,EAAIuH,EAASxJ,GAAO0P,EAAKgB,KAAMhB,EAAKiB,MAC/DJ,GAAmB7M,EAAI8F,EAASxJ,EAAMyQ,GAGxC,GAAIrS,MAAMC,QAAQ4D,EAAI8L,EAAW3K,OAAQpD,IAAQ,CAC/C,IAAMoD,EAASkN,EAAOrO,EAAI8L,EAAW3K,OAAQpD,GAAO0P,EAAKgB,KAAMhB,EAAKiB,MACpEJ,GAAmB7M,EAAIqK,EAAW3K,OAAQpD,EAAMoD,GAChDwN,GAAgB7C,EAAW3K,OAAQpD,GAGrC,GAAI0B,EAAgByM,eAAiBlM,EAAI8L,EAAWI,cAAenO,GAAO,CACxE,IAAMmO,EAAgBmC,EACpBrO,EAAI8L,EAAWI,cAAenO,GAC9B0P,EAAKgB,KACLhB,EAAKiB,MAEPJ,GACE7M,EAAIqK,EAAWI,cAA+BnO,EAAMmO,GACtDyC,GAAgB7C,EAAWI,cAAenO,IAGxC0B,EAAgBqJ,aAAerJ,EAAgBsM,UACjD6C,EAAsB7Q,EAAMmI,GAG9B8G,EAAUE,MAAM7P,KAAK,CACnB0O,QAAS8C,GAAU9Q,EAAMmI,GACzB4C,YAAagD,EAAWhD,YACxB3H,OAAQ2K,EAAW3K,OACnB4E,QAAS+F,EAAW/F,WAIlB+I,EAAe,SAAC/Q,EAAyBoK,GAA1B,OACnB1G,EAAIqK,EAAW3K,OAAQpD,EAAMoK,GAC7B6E,EAAUE,MAAM7P,KAAK,CACnB8D,OAAQ2K,EAAW3K,UAIjB4N,EAAsB,SAC1BhR,EACAiR,EACAxM,GAEA,IAAMF,EAAetC,EAAIuH,EAASxJ,GAElC,GAAIuE,EAAO,CACT,IAAM3D,EAAeqB,EAAIsM,EAAavO,EAAMiC,EAAIqM,EAAgBtO,IAEhEmB,EAAYP,IACX6D,GAAQA,EAAyByM,gBAClCD,EACIvN,EACE6K,EACAvO,EACAiR,EAAuBrQ,EAAekI,GAAcvE,EAAMC,KAE5D2M,GAAcnR,EAAMY,GAG1B6N,EAAY9E,OAASqG,KAGjBoB,EAAsB,SAC1BpR,EACAqR,EACAC,GACmB,IAAnBC,IAAmB,yDAIfC,GAAe,EACbC,EAA8D,CAClEzR,QAEI0R,EAAyBzP,EAAI8L,EAAWI,cAAenO,GAE7D,GAAI0B,EAAgBsM,QAAS,CAC3B,IAAM2D,EAAsB5D,EAAWC,QAEvCD,EAAWC,QAAUyD,EAAOzD,QAAU8C,KACtCU,EAAeG,IAAwBF,EAAOzD,QAGhD,GAAItM,EAAgBqJ,cAAgBuG,EAAkB,CACpD,IAAMM,EAAuB3P,EAAI8L,EAAWhD,YAAa/K,GACnD6R,EAAyBjM,EAC7B3D,EAAIqM,EAAgBtO,GACpBqR,GAGFQ,EACI1K,GAAM4G,EAAWhD,YAAa/K,GAC9B0D,EAAIqK,EAAWhD,YAA6B/K,GAAM,GACtDyR,EAAO1G,YAAcgD,EAAWhD,YAChCyG,EACEA,GACAI,IAAyB3P,EAAI8L,EAAWhD,YAAa/K,GAczD,OAXIsR,IAAqBI,IACvBhO,EAAIqK,EAAWI,cAA+BnO,EAAMsR,GACpDG,EAAOtD,cAAgBJ,EAAWI,cAClCqD,EACEA,GACC9P,EAAgByM,eACfuD,IAA2BJ,GAGjCE,GAAgBD,GAAgBtC,EAAUE,MAAM7P,KAAKmS,GAE9CD,EAAeC,EAAS,IAG3BZ,EAAwB,SAAC7Q,EAAWnB,GAAZ,OAC5B6E,EACEqK,EAAWhD,YACX/K,EACA8R,GACEjT,EACAoD,EAAIqM,EAAgBtO,EAAM,IAC1BiC,EAAI8L,EAAWhD,YAAa/K,EAAM,MAGtC4Q,GAAgB7C,EAAWhD,YAAa/K,IAGpC+R,EAAmB,uCAAG,WAC1B9B,EACAjQ,EACAgI,EACAoC,EACA4H,GAL0B,mBAAApG,EAAA,sDAWpBqG,EAAqBhQ,EAAI8L,EAAW3K,OAAQpD,GAC5CkS,EACJxQ,EAAgBsG,SAAW+F,EAAW/F,UAAYA,EAEhDrF,EAAMwP,YAAc/H,GACtByD,EACEA,GAAsB2B,EAASuB,EAAcpO,EAAMwP,aAClCnS,EAAMoK,IAEzBuF,aAAaZ,GACb3E,EACI1G,EAAIqK,EAAW3K,OAAQpD,EAAMoK,GAC7BjD,GAAM4G,EAAW3K,OAAQpD,KAI3BoK,EAASxE,EAAUqM,EAAoB7H,IAAS6H,IAC/C5P,EAAc2P,KACfE,GACDjC,IAEKmC,EAAgB,6CACjBJ,GACCE,EAAoB,CAAElK,WAAY,IAAE,CACxC5E,OAAQ2K,EAAW3K,OACnBpD,SAGF+N,EAAa,OAAH,wBACLA,GACAqE,GAGLnD,EAAUE,MAAM7P,KAAK8S,IAGvBpD,EAAehP,KAEX0B,EAAgBuM,eAAiBe,EAAehP,KAClDiP,EAAUE,MAAM7P,KAAK,CACnB2O,cAAc,IAEhBe,EAAiB,IArDO,2CAAH,8DAyDnBmB,EAAc,uCAAG,WAAOnQ,GAAP,SAAA4L,EAAA,0DACrBkC,EAASoC,SADY,gCAEXpC,EAASoC,SACb,iBAAK3B,GACLT,EAASuE,QACT,GACErS,GAAQ4O,EAAOjF,MACfH,EACAsE,EAASrE,aACTqE,EAASpE,4BATI,8CAYhB,GAZgB,iFAAH,sDAcd4I,GAA2B,uCAAG,WAAOvS,GAAP,yBAAA6L,EAAA,sEACTuE,IADS,OAGlC,GAHkC,SAC1B/M,EAD0B,EAC1BA,OAEJrD,EAAO,KACUA,GADV,IACT,2BAAW,EAAe,SAClB,EAAQkC,EAAImB,EAAQ,IAEtBM,EAAIqK,EAAW3K,OAAQ,EAAM,GAC7B+D,GAAM4G,EAAW3K,OAAQ,GALtB,oCAQT2K,EAAW3K,OAASA,EAXY,yBAc3BA,GAd2B,2CAAH,sDAiB3BgN,GAAwB,uCAAG,WAC/B/L,EACAkO,GAF+B,qCAAA3G,EAAA,sDAG/ByG,EAH+B,+BAGrB,CACRG,OAAO,GAJsB,OAAA5G,EAAA,KAOZvH,GAPY,iDAOpB,EAPoB,aAQvBE,EAAQF,EAAO,IARQ,oBAWrBoO,EAAiBlO,EAAMC,GACvB6M,EAAajP,EAAKmC,EAAO,OAE3BkO,EAduB,kCAeAC,GACvBnO,EACAtC,EAAIsM,EAAakE,EAAezS,MAChCuP,EACAzB,EAASpE,2BAnBc,aAenBiJ,EAfmB,QAsBVF,EAAezS,MAtBL,oBAuBvBqS,EAAQG,OAAQ,GAEZD,EAzBmB,qDA8BpBA,IACHI,EAAWF,EAAezS,MACtB0D,EACEqK,EAAW3K,OACXqP,EAAezS,KACf2S,EAAWF,EAAezS,OAE5BmH,GAAM4G,EAAW3K,OAAQqP,EAAezS,OArCrB,gBAyC3BqR,GAzC2B,uCA0ClBjB,GACLiB,EACAkB,EACAF,GA7CuB,wDAkDxBA,EAAQG,OAlDgB,4CAAH,wDAqDxBI,GAAmB,qBACJhE,EAAOC,SADH,IACvB,2BAAmC,KAAxB,EAAwB,QAC3BtK,EAAetC,EAAIuH,EAAS,GAElCjF,IACGA,EAAMC,GAAGG,KACNJ,EAAMC,GAAGG,KAAKoE,OAAM,SAACtE,GAAD,OAAUoO,GAAKpO,OAClCoO,GAAKtO,EAAMC,GAAGC,OACnBqO,GAAW,IARQ,8BAWvBlE,EAAOC,QAAU,IAAIhK,KAGjBiM,GAAwB,SAAC9Q,EAAMN,GAAP,OAC5BM,GAAQN,GAAQgE,EAAI6K,EAAavO,EAAMN,IACtCkG,EAAUmN,KAAazE,IAGpB0E,GAAyC,SAC7CjT,EACAa,EACAqS,GAEA,IAAMxC,EAAc,OAAH,UACXhC,EAAY9E,MACZ4E,EACApN,EAAYP,GACZ0N,EACAhD,GAASvL,GAAT,eACGA,EAAQa,GACXA,GAGN,GAAIb,EAAO,CACT,IAAMe,EAASoS,EAAsBnT,GAAOuI,KAC1C,SAAC+B,GAAD,OACE4I,GAAYrE,EAAOD,MAAMtJ,IAAIgF,GAC7BpI,EAAIwO,EAAapG,MAIrB,OAAOjM,MAAMC,QAAQ0B,GAASe,EAASA,EAAO,GAIhD,OADAmS,IAAarE,EAAOkB,UAAW,GACxBW,GAGH0C,GAAiB,SAACnT,GAAD,OACrBiC,EACEwM,EAAY9E,MAAQ4E,EAAcD,EAClCtO,EACA2C,EAAM6L,iBAAmBvM,EAAIqM,EAAgBtO,EAAM,IAAM,KAGvDmR,GAAgB,SACpBnR,EACAnB,GAEsB,IADtBqJ,EACsB,uDADI,GAC1BqJ,EAAsB,uCAEhBhN,EAAetC,EAAIuH,EAASxJ,GAC9BqR,EAAsBxS,EAE1B,GAAI0F,EAAO,CACT,IAAMkO,EAAiBlO,EAAMC,GAEzBiO,IACF/O,EAAI6K,EAAavO,EAAMuJ,GAAgB1K,EAAO4T,IAE9CpB,EACE+B,IAASnM,GAAcwL,EAAehO,MAAQ5E,EAAkBhB,GAC5D,GACAA,EAEFmK,EAAYyJ,EAAehO,OAAS6G,GAAS+F,GAC/CoB,EAAehO,IAAIwE,MAAQoI,EAClBlI,GAAiBsJ,EAAehO,KACzC,YAAIgO,EAAehO,IAAIyD,SAASmL,SAC9B,SAACC,GAAD,OACGA,EAAUC,SACTlC,EACAjL,SAASkN,EAAUzU,UAEhB4T,EAAe9N,KACpBmC,EAAgB2L,EAAehO,KACjCgO,EAAe9N,KAAKpG,OAAS,EACzBkU,EAAe9N,KAAK0O,SAClB,SAACG,GAAD,OACGA,EAAYnL,QAAUjK,MAAMC,QAAQgT,KAC9BA,EAAkB/O,MACnB,SAAC5C,GAAD,OAAkBA,IAAS8T,EAAY3U,SAEzCwS,IAAemC,EAAY3U,SAElC4T,EAAe9N,KAAK,GAAG0D,UAAYgJ,EAExCoB,EAAe9N,KAAK0O,SAClB,SAACI,GAAD,OACGA,EAASpL,QAAUoL,EAAS5U,QAAUwS,KAI7CoB,EAAehO,IAAI5F,MAAQwS,EAG7BE,GACEtC,EAAUC,QAAQ5P,KAAK,CACrB6I,OAAQoG,EACRvO,WAKPkI,EAAQwL,aAAexL,EAAQyL,cAC9BvC,EAAoBpR,EAAMqR,EAAYnJ,EAAQyL,aAEhDzL,EAAQ0L,gBAAkBC,GAAQ7T,IAG9B8T,GAAY,SAAZA,EACJ9T,EACAnB,EACAqJ,GAEA,IAAK,IAAM6L,KAAYlV,EAAO,CAC5B,IAAMwS,EAA0CxS,EAAMkV,GAChD1J,EAAY,GAAH,OAAMrK,EAAN,YAAc+T,GACvBxP,EAAQtC,EAAIuH,EAASa,IAE1BuE,EAAOE,MAAMiB,IAAI/P,IACf+F,EAAYsL,MACZ9M,GAAUA,EAAMC,KAClB1E,EAAauR,GAEVF,GAAc9G,EAAWgH,EAAYnJ,GAAS,GAD9C4L,EAAUzJ,EAAWgH,EAAYnJ,KAKnC8L,GAA0C,SAC9ChU,EACAnB,GACY,IAAZqJ,EAAY,uDAAF,GAEJ3D,EAAQtC,EAAIuH,EAASxJ,GACrBiU,EAAerF,EAAOE,MAAMiB,IAAI/P,GAEtC0D,EAAI6K,EAAavO,EAAMnB,GAEnBoV,GACFhF,EAAUH,MAAMxP,KAAK,CACnBU,OACAmI,OAAQoG,KAIP7M,EAAgBsM,SAAWtM,EAAgBqJ,cAC5C7C,EAAQwL,cAER7C,EAAsB7Q,EAAMnB,GAE5BoQ,EAAUE,MAAM7P,KAAK,CACnBU,OACA+K,YAAagD,EAAWhD,YACxBiD,QAAS8C,GAAU9Q,EAAMnB,QAI7B0F,GAAUA,EAAMC,IAAO3E,EAAkBhB,GAErCsS,GAAcnR,EAAMnB,EAAOqJ,GAAS,GADpC4L,GAAU9T,EAAMnB,EAAOqJ,GAI7B2H,EAAe7P,IAASiP,EAAUE,MAAM7P,KAAK,IAC7C2P,EAAUN,MAAMrP,KAAK,CACnBU,UAIEkU,GAAY,uCAAkB,WAAOC,GAAP,2CAAAvI,EAAA,yDAC5BlB,EAASyJ,EAAMzJ,OACjB1K,EAAO0K,EAAO1K,OACZuE,EAAetC,EAAIuH,EAASxJ,IAHA,oBAQ1BqR,EAAa3G,EAAOjL,KAAOqJ,GAAcvE,EAAMC,IAAMkG,EAAO7L,MAC5DqM,EAAciJ,EAAM1U,OAAS2B,EAC7BgT,GACFC,GAAc9P,EAAMC,MACnBsJ,EAASoC,WACTjO,EAAI8L,EAAW3K,OAAQpD,KACvBuE,EAAMC,GAAG8P,MACZC,GACErJ,EACAjJ,EAAI8L,EAAWI,cAAenO,GAC9B+N,EAAW3C,YACXkE,EACAF,GAEEoF,EAAY3E,EAAe7P,EAAMkL,GAEnCA,EACF3G,EAAMC,GAAGiQ,QAAUlQ,EAAMC,GAAGiQ,OAAON,GAC1B5P,EAAMC,GAAGkQ,UAClBnQ,EAAMC,GAAGkQ,SAASP,GAGpBzQ,EAAI6K,EAAavO,EAAMqR,GAEjBW,EAAaZ,EACjBpR,EACAqR,EACAnG,GACA,GAGIqG,GAAgBlP,EAAc2P,IAAewC,GAElDtJ,GACC+D,EAAUN,MAAMrP,KAAK,CACnBU,OACAP,KAAM0U,EAAM1U,QAGZ2U,EA/C4B,0CAiD5B7C,GACAtC,EAAUE,MAAM7P,KAAI,eAAGU,QAAUwU,EAAY,GAAKxC,KAlDtB,YAsD/B9G,GAAesJ,GAAavF,EAAUE,MAAM7P,KAAK,IAElD0P,EAAehP,IAAQgP,EAAehP,GAAQ,GAE9C0B,EAAgBuM,cACdgB,EAAUE,MAAM7P,KAAK,CACnB2O,cAAc,KAGdH,EAASoC,SA/DmB,kCAgELC,EAAe,CAACnQ,IAhEX,iBAgEtBoD,EAhEsB,EAgEtBA,OACFuR,EAA4BxK,GAChC4D,EAAW3K,OACXoG,EACAxJ,GAEI4U,EAAoBzK,GACxB/G,EACAoG,EACAmL,EAA0B3U,MAAQA,GAGpC,EAAQ4U,EAAkBxK,MAC1BpK,EAAO4U,EAAkB5U,KAEzBgI,EAAU3F,EAAce,GA/EM,yCAkFtBsP,GACJnO,EACAtC,EAAIsM,EAAavO,GACjBuP,EACAzB,EAASpE,2BAtFiB,oBAwF5B1J,EAPF,EAjF8B,uBA0FdgQ,GAAa,GA1FC,QA0F9BhI,EA1F8B,eA6FhCzD,EAAMC,GAAG8P,MAAQT,GAAQtP,EAAMC,GAAG8P,MAElCvC,GAAoB,EAAO/R,EAAMgI,EAAS,EAAOgK,GA/FjB,4CAAlB,sDAmGZ6B,GAAO,uCAAiC,WAAO7T,GAAP,mCAAA4L,EAAA,yDAAa1D,EAAb,+BAAuB,GAG7D2M,EAAa3B,EAAsBlT,GAEzCiP,EAAUE,MAAM7P,KAAK,CACnB2O,cAAc,KAGZH,EAASoC,SAT+B,iCAUrBoC,GACnBnR,EAAYnB,GAAQA,EAAO6U,GAXa,OAUpCzR,EAVoC,OAc1C4E,EAAU3F,EAAce,GACxBoK,EAAmBxN,GACd6U,EAAW5U,MAAK,SAACD,GAAD,OAAUiC,EAAImB,EAAQpD,MACvCgI,EAjBsC,4BAkBjChI,EAlBiC,kCAoBlC8U,QAAQC,IACZF,EAAWvM,IAAX,uCAAe,WAAO+B,GAAP,eAAAuB,EAAA,6DACPrH,EAAQtC,EAAIuH,EAASa,GADd,SAEA+F,GACX7L,GAASA,EAAMC,GAAf,eAAuB6F,EAAY9F,GAAUA,GAHlC,mFAAf,wDArBsC,QAmB1CiJ,EAnB0C,OA4BxCzE,MAAMxI,SACRyP,IA7B0C,yCA+BPI,GAAyB5G,GA/BlB,QA+B1CgE,EAAmBxF,EA/BuB,sBAkC5CiH,EAAUE,MAAM7P,KAAI,8CACbgM,GAAStL,IACb0B,EAAgBsG,SAAWA,IAAY+F,EAAW/F,QAC/C,GACA,CAAEhI,SACF8N,EAASoC,SAAW,CAAElI,WAAY,IAAE,CACxC5E,OAAQ2K,EAAW3K,OACnB6K,cAAc,KAGhB/F,EAAQ8M,cACLxH,GACD,EACEhE,GACA,SAACtI,GAAD,OAASe,EAAI8L,EAAW3K,OAAQlC,KAChClB,EAAO6U,EAAajG,EAAOjF,OAjDa,kBAoDrC6D,GApDqC,4CAAjC,sDAuDPuF,GAA4C,SAChD8B,GAIA,IAAM1M,EAAS,OAAH,wBACPmG,GACCG,EAAY9E,MAAQ4E,EAAc,IAGxC,OAAOpN,EAAY0T,GACf1M,EACAmD,GAASuJ,GACT5S,EAAIkG,EAAQ0M,GACZA,EAAWvM,KAAI,SAACtI,GAAD,OAAUiC,EAAIkG,EAAQnI,OAGrCiV,GAAgD,SAACjV,GACrDA,EACIkT,EAAsBlT,GAAMqT,SAAQ,SAAC6B,GAAD,OAClC/N,GAAM4G,EAAW3K,OAAQ8R,MAE1BnH,EAAW3K,OAAS,GAEzB6L,EAAUE,MAAM7P,KAAK,CACnB8D,OAAQ2K,EAAW3K,OACnB4E,SAAS,KAIPmN,GAA0C,SAACnV,EAAMoK,EAAOlC,GAC5D,IAAMzD,GAAQxC,EAAIuH,EAASxJ,EAAM,CAAEwE,GAAI,KAAgBA,IAAM,IAAIC,IAEjEf,EAAIqK,EAAW3K,OAAQpD,EAAI,+BACtBoK,GAAK,CACR3F,SAGFwK,EAAUE,MAAM7P,KAAK,CACnBU,OACAoD,OAAQ2K,EAAW3K,OACnB4E,SAAS,IAGXE,GAAWA,EAAQ8M,aAAevQ,GAAOA,EAAIC,OAASD,EAAIC,SAGtDiK,GAAoC,SACxC3O,EAIAY,GALwC,OAOxCkE,EAAW9E,GACPiP,EAAUN,MAAM5L,UAAU,CACxBzD,KAAM,SAAC8V,GAAD,OACJpV,EACEgT,QACEvS,EACAG,GAEFwU,MAGNpC,GACEhT,EACAY,GACA,IAGFkS,GAA8C,SAAC9S,GAAkB,MAAZkI,EAAY,uDAAF,GAAE,IAC7ClI,EAAOkT,EAAsBlT,GAAQ4O,EAAOjF,OADC,IACrE,2BAA2E,KAAhEU,EAAgE,QACzEuE,EAAOjF,MAAM0L,OAAOhL,GACpBuE,EAAOE,MAAMuG,OAAOhL,GAEhBpI,EAAIuH,EAASa,KACVnC,EAAQoN,YACXnO,GAAMqC,EAASa,GACflD,GAAMoH,EAAalE,KAGpBnC,EAAQqN,WAAapO,GAAM4G,EAAW3K,OAAQiH,IAC9CnC,EAAQsN,WAAarO,GAAM4G,EAAWhD,YAAaV,IACnDnC,EAAQuN,aAAetO,GAAM4G,EAAWI,cAAe9D,IACvDyD,EAASU,mBACPtG,EAAQwN,kBACTvO,GAAMmH,EAAgBjE,KAhByC,8BAoBrE4E,EAAUN,MAAMrP,KAAK,IAErB2P,EAAUE,MAAM7P,KAAI,+BACfyO,GACE7F,EAAQsN,UAAiB,CAAExH,QAAS8C,MAAhB,MAG1B5I,EAAQyN,aAAe3F,KAGpB4F,GAA0C,SAA1CA,EAA2C5V,GAAkB,IAAZkI,EAAY,uDAAF,GACzD3D,EAAQtC,EAAIuH,EAASxJ,GAyB3B,OAvBA0D,EAAI8F,EAASxJ,EAAM,CACjBwE,GAAI,OAAF,sCACID,GAASA,EAAMC,GAAKD,EAAMC,GAAK,CAAEC,IAAK,CAAEzE,UAAQ,CACpDA,OACA2J,OAAO,IACJzB,KAGP0G,EAAOjF,MAAMtE,IAAIrF,IAEhBmB,EAAY+G,EAAQrJ,QAAU6E,EAAI6K,EAAavO,EAAMkI,EAAQrJ,OAE9D0F,EACIuD,EAAUI,EAAQrF,WAClBa,EACE6K,EACAvO,EACAkI,EAAQrF,cACJpC,EACAwB,EAAIsM,EAAavO,EAAM8I,GAAcvE,EAAMC,MAEjDwM,EAAoBhR,GAAM,GAEvB2N,GACF,CAAE3N,KAAMA,G,6BAEPA,QACI8H,EAAUI,EAAQrF,UAClB,CAAEA,SAAUqF,EAAQrF,UACpB,IAAE,CACN6R,SAAUR,GACVO,OAAQP,GACRzP,IAAK,SAAF,oGAAE,WAACA,GACJ,GAAIA,EAAK,CACPmR,EAAS5V,EAAMkI,GACf,IAAI,EAAejG,EAAIuH,EAASxJ,GAC1B6V,EAAW1U,EAAYsD,EAAI5F,QAC7B4F,EAAIqR,kBACDrR,EAAIqR,iBAAiB,yBAAyB,IAGjDrR,EAEEyH,EAAoB6J,GAA0BF,GAEpD,GACEA,IAAa,EAAMrR,GAAGC,KACrByH,GACCnL,EAAQ,EAAMyD,GAAGG,MAAQ,IAAIrC,MAC3B,SAAC8F,GAAD,OAAYA,IAAWyN,KAG3B,OAGF,EAAQ,CACNrR,GAAI0H,E,+BAEK,EAAM1H,IAAE,CACXG,KAAM,GAAF,mBACC5D,EAAQ,EAAMyD,GAAGG,MAAQ,IAAIrE,OAAOuS,KADrC,CAEFgD,IAEFpR,IAAK,CAAEhF,KAAMoW,EAASpW,KAAMO,UAAM,+BAG/B,EAAMwE,IAAE,CACXC,IAAKoR,KAIbnS,EAAI8F,EAASxJ,EAAM,KAEjBkI,IAAYA,EAAQrF,WACpBmO,EAAoBhR,GAAM,EAAO6V,OAC9B,CACL,IAAM,EAAe5T,EAAIuH,EAASxJ,EAAM,IAClCwO,EACJV,EAASU,kBAAoBtG,EAAQsG,iBAEnC,EAAMhK,KACR,EAAMA,GAAGmF,OAAQ,GAGnB6E,KAEI,EAAmBI,EAAOE,MAAO9O,KAASyO,EAAYC,SAExDE,EAAOC,QAAQxJ,IAAIrF,UAM3BgW,GACJ,SAACC,EAASC,GAAV,8CAAwB,WAAOpX,GAAP,uBAAA8M,EAAA,yDAClB9M,IACFA,EAAEqX,gBAAkBrX,EAAEqX,iBACtBrX,EAAEsX,SAAWtX,EAAEsX,WAEbC,GAAoB,EACpB5F,EAAW,iBAAalC,GAE5BU,EAAUE,MAAM7P,KAAK,CACnB8O,cAAc,IATM,UAahBN,EAASoC,SAbO,iCAceC,IAdf,gBAcV/M,EAdU,EAcVA,OAAQ+E,EAdE,EAcFA,OAChB4F,EAAW3K,OAASA,EACpBqN,EAActI,EAhBI,yCAkBZiI,GAAyB5G,GAlBb,YAsBlBnH,EAAc0L,EAAW3K,UACzBrB,OAAOG,KAAK6L,EAAW3K,QAAQ2F,OAAM,SAAC/I,GAAD,OAAUiC,EAAIwO,EAAazQ,MAvB9C,wBAyBlBiP,EAAUE,MAAM7P,KAAK,CACnB8D,OAAQ,GACRgL,cAAc,IA3BE,UA6BZ6H,EAAQxF,EAAa3R,GA7BT,wCA+BlBoX,GA/BkB,uCA+BEA,EAAUnI,EAAW3K,OAAQtE,GA/B/B,QAgClBgP,EAASJ,kBACP,EACElE,GACA,SAACtI,GAAD,OAASe,EAAI8L,EAAW3K,OAAQlC,KAChC0N,EAAOjF,OApCO,gEAwCpB0M,GAAoB,EAxCA,8BA2CpBtI,EAAW3C,aAAc,EACzB6D,EAAUE,MAAM7P,KAAK,CACnB8L,aAAa,EACbgD,cAAc,EACdC,mBACEhM,EAAc0L,EAAW3K,SAAWiT,EACtCnI,YAAaH,EAAWG,YAAc,EACtC9K,OAAQ2K,EAAW3K,SAlDD,6EAAxB,uDAuDIkT,GAAoC,SACxCC,GACqB,IAArBC,EAAqB,uDAAF,GAEbC,GAAwBpU,EAAckU,GACtCG,EAAgBH,GAAcjI,EAC9BqI,EAAqB/R,EAAY8R,GAMvC,GAJKF,EAAiBI,oBACpBtI,EAAiBoI,IAGdF,EAAiBK,WAAY,CAChC,GAAIzD,GAAO,WACUxE,EAAOjF,OADjB,IACT,2BAAiC,KAAtB,EAAsB,QACzBpF,EAAQtC,EAAIuH,EAAS,GAC3B,GAAIjF,GAASA,EAAMC,GAAI,CACrB,IAAMiO,EAAiBrU,MAAMC,QAAQkG,EAAMC,GAAGG,MAC1CJ,EAAMC,GAAGG,KAAK,GACdJ,EAAMC,GAAGC,IAEb,IACEwC,GAAcwL,IACZA,EAAeqE,QAAQ,QAASR,QAClC,MACA,aAZG,+BAiBX/H,EAAc5L,EAAM6L,iBAChBgI,EAAiBI,kBACfhS,EAAY0J,GACZ,GACFqI,EACJnN,EAAU,GAEVyF,EAAUC,QAAQ5P,KAAK,CACrB6I,OAAQsO,EAAuBE,EAAqBrI,IAGtDW,EAAUN,MAAMrP,KAAK,IAErB2P,EAAUH,MAAMxP,KAAK,CACnB6I,OAAQwO,IAIZ/H,EAAS,CACPjF,MAAO,IAAI9E,IACXgK,QAAS,IAAIhK,IACbiK,MAAO,IAAIjK,IACX8J,MAAO,IAAI9J,IACXiL,UAAU,EACVpL,MAAO,IAGTuK,EAAUE,MAAM7P,KAAK,CACnB4O,YAAasI,EAAiBO,gBAC1BhJ,EAAWG,YACX,EACJF,QAASwI,EAAiBhB,UACtBzH,EAAWC,UACXwI,EAAiBI,oBAChBhR,EAAU2Q,EAAYjI,GAE3BlD,cAAaoL,EAAiBQ,iBAC1BjJ,EAAW3C,YAEfL,YAAayL,EAAiBhB,UAC1BzH,EAAWhD,YACTyL,EAAiBI,mBAAqBL,EACpCxU,OAAOkV,QAAQV,GAAYtV,QACzB,SAAC4H,EAAD,0BAAY3H,EAAZ,KAAiBrC,EAAjB,YAAuB,+BAClBgK,GADkB,eAEpB3H,EAAMrC,IAAUoD,EAAIqM,EAAgBpN,OAEvC,IAEF,GACRiN,cAAeqI,EAAiBf,YAC5B1H,EAAWI,cACV,GACL/K,OAAQoT,EAAiBU,WACrBnJ,EAAW3K,OACV,GACLgL,cAAc,EACdC,oBAAoB,IAGtBI,EAAY9E,OACTjI,EAAgBsG,WAAawO,EAAiBb,YACjDlH,EAAYE,QAAUhM,EAAM6L,kBAGxB2I,GAA0C,SAACnX,GAC/C,IAAMuE,EAAQtC,EAAIuH,EAASxJ,GAAMwE,IAChCD,EAAME,IAAIC,MAAQH,EAAME,IAAMF,EAAMI,KAAK,IAAID,SAGhD,MAAO,CACLwK,QAAS,CACP0G,YACA9C,cACA3C,iBACA6C,aACAlC,aACAd,eACA4C,oBACAvC,oBACA8C,kBACAlE,YACAvN,kBACI8H,cACF,OAAOA,GAELA,YAAQ3K,GACV2K,EAAU3K,GAER0P,kBACF,OAAOA,GAELA,gBAAY1P,GACd0P,EAAc1P,GAEZ4P,kBACF,OAAOA,GAELA,gBAAY5P,GACd4P,EAAc5P,GAEZyP,qBACF,OAAOA,GAELA,mBAAezP,GACjByP,EAAiBzP,GAEf+P,aACF,OAAOA,GAELA,WAAO/P,GACT+P,EAAS/P,GAEPkP,iBACF,OAAOA,GAELA,eAAWlP,GACbkP,EAAalP,GAEXiP,eACF,OAAOA,GAELA,aAASjP,GACXiP,EAAW,OAAH,wBACHA,GACAjP,KAITgV,WACA+B,YACAI,gBACArH,SACAqF,YACAjB,aACAuD,SACArB,eACAnC,cACAqC,YACAgC,a,SCtrCYC,KAIkC,IAAhDzU,EAAgD,uDAAF,GAExC0U,EAAe,WAGrB,EAAqC,WAAwC,CAC3ErJ,SAAS,EACTC,cAAc,EACdlD,YAAa,GACbK,aAAa,EACb8C,YAAa,EACbC,cAAe,GACfC,cAAc,EACdC,oBAAoB,EACpBrG,SAAS,EACT5E,OAAQ,KAVV,mBAAO3B,EAAP,KAAkB6V,EAAlB,KAaID,EAAanX,QACfmX,EAAanX,QAAQgP,QAAQpB,SAAWnL,EAExC0U,EAAanX,QAAO,+BACf0N,GAAkBjL,IAAM,CAC3BlB,cAIJ,IAAMyN,EAAUmI,EAAanX,QAAQgP,QAyCrC,OAvCAxM,EAAa,CACXI,QAASoM,EAAQD,UAAUE,MAC3BnM,SAAU,SAACvB,GACL8V,EAAsB9V,EAAWyN,EAAQxN,iBAAiB,KAC5DwN,EAAQnB,WAAU,+BACbmB,EAAQnB,YACRtM,GAGL6V,EAAgB,OAAD,UAAMpI,EAAQnB,iBAKnC,aAAgB,WACTmB,EAAQT,YAAY9E,QACvBuF,EAAQxN,gBAAgBsG,SAAWkH,EAAQc,eAC3Cd,EAAQT,YAAY9E,OAAQ,GAE1BuF,EAAQT,YAAYE,QACtBO,EAAQT,YAAYE,OAAQ,EAC5BO,EAAQD,UAAUE,MAAM7P,KAAK,KAE/B4P,EAAQ0D,sBAGV,aACE,kBAAM,kBACJ7Q,OAAOoG,OAAO+G,EAAQD,WAAWoE,SAAQ,SAACvQ,GAAD,OACvCA,EAAQL,oBAEZ,CAACyM,IAGHmI,EAAanX,QAAQuB,UAAY+V,EAC/B/V,EACAyN,EAAQxN,iBAGH2V,EAAanX","file":"static/js/1.18eb971f.chunk.js","sourcesContent":["import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import * as React from 'react';\n\nimport { Subject, TearDown } from './utils/createSubject';\nimport { Noop } from './types';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n  skipEarlySubscription?: boolean;\n};\n\ntype Unsubscribe = { unsubscribe: TearDown };\n\ntype Payload<T> = {\n  _unsubscribe: React.MutableRefObject<Unsubscribe | undefined>;\n  props: Props<T>;\n};\n\nconst tearDown = (\n  _unsubscribe: React.MutableRefObject<Unsubscribe | undefined>,\n) => {\n  if (_unsubscribe.current) {\n    _unsubscribe.current.unsubscribe();\n    _unsubscribe.current = undefined;\n  }\n};\n\nconst updateSubscriptionProps =\n  <T>({ _unsubscribe, props }: Payload<T>) =>\n  () => {\n    if (props.disabled) {\n      tearDown(_unsubscribe);\n    } else if (!_unsubscribe.current) {\n      _unsubscribe.current = props.subject.subscribe({\n        next: props.callback,\n      });\n    }\n  };\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _unsubscribe = React.useRef<Unsubscribe>();\n  const _updateSubscription = React.useRef<Noop>(() => {});\n\n  _updateSubscription.current = updateSubscriptionProps({\n    _unsubscribe,\n    props,\n  });\n\n  !props.skipEarlySubscription && _updateSubscription.current();\n\n  React.useEffect(() => {\n    _updateSubscription.current();\n    return () => tearDown(_unsubscribe);\n  }, []);\n}\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type TearDown = Noop;\n\nexport type Subscription = {\n  add: (tearDown: TearDown) => void;\n  unsubscribe: () => void;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n  unsubscribe: Noop;\n};\n\nfunction createSubscription() {\n  let tearDowns: TearDown[] = [];\n\n  const add = (tearDown: TearDown) => {\n    tearDowns.push(tearDown);\n  };\n\n  const unsubscribe = () => {\n    for (const teardown of tearDowns) {\n      teardown();\n    }\n    tearDowns = [];\n  };\n\n  return {\n    add,\n    unsubscribe,\n  };\n}\n\nfunction createSubscriber<T>(\n  observer: Observer<T>,\n  subscription: Subscription,\n): Observer<T> {\n  let closed = false;\n  subscription.add(() => (closed = true));\n\n  const next = (value: T) => {\n    if (!closed) {\n      observer.next(value);\n    }\n  };\n\n  return {\n    next,\n  };\n}\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>) => {\n    const subscription = createSubscription();\n    const subscriber = createSubscriber(observer, subscription);\n    _observers.push(subscriber);\n    return subscription;\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default (value: unknown): value is string => typeof value === 'string';\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && document.contains(ref);\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    control: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const isFieldWatched = (\n    name: FieldPath<TFieldValues>,\n    isBlurEvent?: boolean,\n  ) =>\n    !isBlurEvent &&\n    (_names.watchAll ||\n      _names.watch.has(name) ||\n      _names.watch.has((name.match(/\\w+/) || [])[0]));\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const updateFieldArrayDirty = (name: any, value: any) => (\n    set(\n      _formState.dirtyFields as TFieldValues,\n      name,\n      setFieldArrayDirtyFields(\n        value,\n        get(_defaultValues, name, []),\n        get(_formState.dirtyFields, name, []),\n      ),\n    ),\n    unsetEmptyArray(_formState.dirtyFields, name)\n  );\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    if (names) {\n      const result = convertToArrayPayload(names).map(\n        (fieldName) => (\n          isGlobal && _names.watch.add(fieldName as InternalFieldName),\n          get(fieldValues, fieldName as InternalFieldName)\n        ),\n      );\n\n      return Array.isArray(names) ? result : result[0];\n    }\n\n    isGlobal && (_names.watchAll = true);\n    return fieldValues;\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    get(\n      _stateFlags.mount ? _formValues : _defaultValues,\n      name,\n      props.shouldUnregister ? get(_defaultValues, name, []) : [],\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n    shouldRender?: boolean,\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isFileInput(fieldReference.ref) && !isString(fieldValue)) {\n          fieldReference.ref.files = fieldValue as FileList;\n        } else if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n\n        shouldRender &&\n          _subjects.control.next({\n            values: _formValues,\n            name,\n          });\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = (\n    name: FieldPath<TFieldValues>,\n    value: UnpackNestedValue<PathValue<TFieldValues, FieldPath<TFieldValues>>>,\n    options: SetValueConfig,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue: SetFieldValue<TFieldValues> = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options, true);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        updateFieldArrayDirty(name, value);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options, true);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const handleChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const isWatched = isFieldWatched(name, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(isWatched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && isWatched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) && set(_formValues, name, options.value);\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isBoolean(options.disabled)\n            ? { disabled: options.disabled }\n            : {}),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              register(name, options);\n              let field: Field = get(_fields, name);\n              const fieldRef = isUndefined(ref.value)\n                ? ref.querySelectorAll\n                  ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) ||\n                    ref\n                  : ref\n                : ref;\n\n              const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n              if (\n                fieldRef === field._f.ref ||\n                (isRadioOrCheckbox &&\n                  compact(field._f.refs || []).find(\n                    (option) => option === fieldRef,\n                  ))\n              ) {\n                return;\n              }\n\n              field = {\n                _f: isRadioOrCheckbox\n                  ? {\n                      ...field._f,\n                      refs: [\n                        ...compact(field._f.refs || []).filter(live),\n                        fieldRef,\n                      ],\n                      ref: { type: fieldRef.type, name },\n                    }\n                  : {\n                      ...field._f,\n                      ref: fieldRef,\n                    },\n              };\n\n              set(_fields, name, field);\n\n              (!options || !options.disabled) &&\n                updateValidAndValue(name, false, fieldRef);\n            } else {\n              const field: Field = get(_fields, name, {});\n              const shouldUnregister =\n                _options.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              shouldUnregister &&\n                !(\n                  isNameInFieldArray(_names.array, name) && _stateFlags.action\n                ) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const hasUpdatedFormValues = !isEmptyObject(formValues);\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.control.next({\n        values: hasUpdatedFormValues ? cloneUpdatedValues : _defaultValues,\n      });\n\n      _subjects.watch.next({});\n\n      _subjects.array.next({\n        values: cloneUpdatedValues,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (formState) => {\n      if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...formState,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  React.useEffect(\n    () => () =>\n      Object.values(control._subjects).forEach((subject) =>\n        subject.unsubscribe(),\n      ),\n    [control],\n  );\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"],"sourceRoot":""}