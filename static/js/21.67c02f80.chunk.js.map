{"version":3,"sources":["api/masterData.ts","content/pages/Components/MasterData/Post/index.tsx"],"names":["require","config","apiurl","process","REACT_APP_API_URL","apiKey","REACT_APP_API_KEY","insert","endpoint","rawData","a","timestamp","moment","unix","headers","securitycode","sha256Generator","sessionId","toString","id","axios","post","res","data","put","console","error","response","list","type","session","securityCode","get","detail","Post","useState","tableData","setTableData","useCookies","cookie","getData","param","user","sessionID","results","length","useEffect","AddButton","variant","component","RouterLink","to","heading","maxWidth","title","action","Paper","map","entry","i","publishedDate"],"mappings":"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","file":"static/js/21.67c02f80.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport { sha256Generator } from 'src/lib/encryptor'\r\nimport moment from 'moment'\r\n\r\nrequire('dotenv').config()\r\nconst apiurl = process.env.REACT_APP_API_URL\r\nconst apiKey = process.env.REACT_APP_API_KEY\r\n\r\ninterface ServerResponse{\r\n    code?: number,\r\n    results?: ServerData[],\r\n    message: string,\r\n    status: string\r\n}\r\n\r\ninterface ServerData{\r\n    id: number,\r\n    title: string\r\n}\r\n\r\ninterface ParamData{\r\n    endpoint: string,\r\n    rawData: rawData\r\n}\r\n\r\ninterface rawData{\r\n    id: any,\r\n    name: string\r\n}\r\n\r\nconst deleteParam = ['timestamp']\r\n\r\nexport async function insert(endpoint, rawData){\r\n    const timestamp = moment().unix()\r\n\r\n    const config = {\r\n        headers: {\r\n            securitycode: sha256Generator(apiKey+rawData.sessionId+timestamp),\r\n            timestamp: moment().unix().toString()\r\n        }\r\n    }\r\n\r\n    try{\r\n\r\n        if(rawData.id === ''){\r\n            const res: any = await axios.post(`${apiurl}/${endpoint}`, rawData, config)\r\n\r\n            return res.data\r\n        }else{\r\n            const res = await axios.put(`${apiurl}/${endpoint}`, rawData, config)\r\n\r\n            return res.data\r\n        }\r\n    \r\n    }catch(errors){\r\n        console.error(errors);\r\n        return errors.response.data\r\n    }\r\n}\r\n\r\nexport async function list(type: string = '', data: any){\r\n    try{\r\n        const timestamp = moment().unix().toString()\r\n        const config = {\r\n            headers: {\r\n                session: data.sessionId,\r\n                securityCode: sha256Generator(process.env.REACT_APP_API_KEY+data.sessionId+timestamp),\r\n                timestamp: timestamp\r\n            }\r\n        }\r\n\r\n        // deleteParam.forEach((e: string) => delete data[e])\r\n\r\n        const res = await axios.get<ServerResponse>(`${apiurl}/${type}`, config)\r\n        \r\n        return res.data\r\n    }catch(errors){\r\n        console.error(errors)\r\n        return errors.response.data\r\n        // return errors\r\n    }\r\n}\r\nexport async function detail(type: string, data: any){\r\n    try{\r\n        const timestamp = moment().unix().toString()\r\n        const config = {\r\n            headers: {\r\n                session: data.sessionId,\r\n                securityCode: sha256Generator(apiKey+data.sessionId+timestamp),\r\n                timestamp: timestamp\r\n            }\r\n        }\r\n\r\n        const res = await axios.get(`${apiurl}/${type}/details/${data.id}`, config)\r\n\r\n        return res.data\r\n    }catch(errors){\r\n        console.error(errors)\r\n        return errors.response.data\r\n    }\r\n}\r\n\r\nexport async function deleteData(type: string, id: number){\r\n    try{\r\n        const res = await axios.delete(`${apiurl}/${type}/${id}`).then(response => response)\r\n\r\n        return res.data\r\n    }catch(errors){\r\n        console.error(errors)\r\n    }\r\n}\r\n\r\nexport async function uploadImage(files: any){\r\n    return {\r\n        message: 'Your files has success to upload!',\r\n        status: 'success'\r\n    }\r\n}","import { useState, useEffect } from 'react'\r\nimport { Helmet } from 'react-helmet-async'\r\nimport { NavLink as RouterLink } from 'react-router-dom'\r\n\r\nimport PageTitle from 'src/components/PageTitle'\r\nimport PageTitleWrapper from 'src/components/PageTitleWrapper'\r\nimport { Container, Grid, Card, CardHeader, CardContent, Divider, Box, Paper } from '@material-ui/core'\r\n\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport Button from '@material-ui/core/Button'\r\n\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\n\r\nimport TextField from '@material-ui/core/TextField'\r\n\r\nimport { useCookies } from 'react-cookie'\r\nimport moment from 'moment'\r\n\r\nimport { list } from 'src/api/masterData'\r\n\r\nconst Post = () => {\r\n    const [tableData, setTableData] = useState([])\r\n    const [cookie, setCookie] = useCookies([\"user\"])\r\n\r\n    const getData = async () => {\r\n        const param = {\r\n            sessionId: cookie.user.sessionID,\r\n            type: 'posts'\r\n        }\r\n\r\n        const data = await list('posts', param)\r\n\r\n        if(data.results.length > 0){\r\n            setTableData(data.results)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getData()\r\n    }, [])\r\n\r\n    const AddButton = () => (\r\n        <Button variant=\"contained\" component={RouterLink} to=\"/management/postform\">\r\n            Add\r\n        </Button>\r\n    )\r\n\r\n    return(\r\n        <>\r\n            <Helmet>\r\n                <title> Post | Blog </title>\r\n            </Helmet>\r\n\r\n            <PageTitleWrapper>\r\n                <PageTitle heading=\"Posts\" />\r\n            </PageTitleWrapper>\r\n\r\n            <Container maxWidth=\"lg\">\r\n                <Card>\r\n                    <CardHeader title=\"Posts list\" action={<AddButton />} />\r\n                    <CardContent>\r\n                        <TableContainer component={Paper}>\r\n                            <Table aria-label=\"Posts list\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell> Title </TableCell>\r\n                                        <TableCell> Published </TableCell>\r\n                                        <TableCell>  </TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {tableData.map((entry, i) => (\r\n                                        <TableRow key={i}>\r\n                                            <TableCell><Button component={RouterLink} to={`/management/postform/${entry.id}`}>{entry.title}</Button></TableCell>\r\n                                            <TableCell>{entry.publishedDate}</TableCell>\r\n                                            <TableCell></TableCell>\r\n                                        </TableRow>\r\n                                    ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </CardContent>\r\n                </Card>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Post"],"sourceRoot":""}